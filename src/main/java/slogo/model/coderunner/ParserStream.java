package slogo.model.coderunner;

import java.awt.desktop.AppReopenedEvent;
import java.util.ArrayList;
import java.util.List;
import slogo.model.api.exception.coderunner.ErrorType;
import slogo.model.api.exception.coderunner.RunCodeError;
import slogo.model.coderunner.Expression.Block;
import slogo.model.coderunner.Expression.Make;

/**
 * Parses a stream of tokens into a stream of interpretable expressions.
 *
 * @author Jason Qiu
 */
class ParserStream implements Parser {

  /**
   * Initializes the parser stream
   *
   * @param lexer the input token stream
   */
  ParserStream(Lexer lexer) {
    this.lexer = lexer;
    currentToken = null;
    nextToken = new Token(TokenType.SOF, "^", -1, TOKEN_LINE_PLACEHOLDER);
    nextToken();
  }

  private static final String TOKEN_LINE_PLACEHOLDER = "autogenerated by parser";

  /**
   * Attempts to parse the next expression from a given token stream
   *
   * @return the expression if successful, otherwise null
   * @throws RunCodeError if there were parsing errors
   */
  @Override
  public Expression parseNext() throws RunCodeError {
    return expression();
  }

  private Expression expression() {
    return term();
  }

  private Expression term() {
    Expression expression = factor();
    if (match(TokenType.PLUS, TokenType.MINUS)) {
      Token operator = currentToken;
      Expression right = factor();
      return new Expression.Binary(operator, expression, right);
    }
    return expression;
  }

  private Expression factor() {
    Expression expression = comparison();
    if (match(TokenType.STAR, TokenType.FORWARD_SLASH, TokenType.PERCENT)) {
      Token operator = currentToken;
      Expression right = comparison();
      return new Expression.Binary(operator, expression, right);
    }
    return expression;
  }

  private Expression comparison() {
    Expression expression = unary();
    if (match(TokenType.EQUAL_TO, TokenType.NOT_EQUAL_TO, TokenType.GREATER_EQUAL_TO,
        TokenType.LESS_EQUAL_TO, TokenType.GREATER_THAN, TokenType.LESS_THAN)) {
      Token operator = currentToken;
      Expression right = unary();
      return new Expression.Binary(operator, expression, right);
    }
    return expression;
  }

  private Expression unary() {
    Expression expression = literal();
    if (expression != null) {
      return expression;
    }
    if (match(TokenType.TILDA)) {
      return new Expression.Unary(currentToken, literal());
    }
    return expression;
  }

  private Expression literal() {
    Expression expression = keywords();
    if (expression != null) {
      return expression;
    }
    if (match(TokenType.VARIABLE)) {
      return new Expression.Variable(currentToken);
    }
    if (match(TokenType.NUMBER)) {
      return new Expression.Number((double) currentToken.literal());
    }
    return expression;
  }

  // keywords expressions
  // MAKE, REPEAT, DOTIMES, FOR, IF, IFELSE, TO, ID, TURTLES, TELL, ASK, ASKWITH
  private Expression keywords() {
    Block expression = block();

    if (match(TokenType.MAKE)) {
      return makeExpression();
    }
    if (match(TokenType.REPEAT)) {
      return repeatExpression();
    }
    if (match(TokenType.DOTIMES)) {
      return doTimesExpression();
    }
    if (match(TokenType.FOR)) {
      return forExpression();
    }
    if (match(TokenType.IF)) {
      return ifExpression();
    }
    if (match(TokenType.IFELSE)) {
      return ifElseExpression();
    }
    if (match(TokenType.TO)) {
      return toExpression();
    }
    if (match(TokenType.TURTLES)) {
      return new Expression.Turtles();
    }
    if (match(TokenType.TELL)) {
      return new Expression.Tell(consumeBlock().getBody());
    }
    if (match(TokenType.ASK)) {
      return new Expression.Ask(consumeBlock().getBody(), consumeBlock());
    }
    if (match(TokenType.ASKWITH)) {
      return new Expression.AskWith(expression(), consumeBlock());
    }
    if (match(TokenType.COMMAND)) {
      return new Expression.Call(currentToken);
    }

    return expression;
  }

  private Expression makeExpression() {
    Token variable = consume(TokenType.VARIABLE);
    Expression value = expression();
    return new Make(variable, value);
  }

  private Expression repeatExpression() {
    Expression times = expression();
    Block body = consumeBlock();
    Token plusToken = new Token(TokenType.PLUS, null, -1, TOKEN_LINE_PLACEHOLDER);
    Expression end = new Expression.Binary(plusToken, times, new Expression.Number(1));
    return new Expression.For(new Token(TokenType.VARIABLE, "repcount", -1, TOKEN_LINE_PLACEHOLDER),
        new Expression.Number(1), end, new Expression.Number(1), body);
  }

  private Expression doTimesExpression() {
    consume(TokenType.LEFT_SQUARE_BRACKET);
    consume(TokenType.VARIABLE);
    Token variableToken = currentToken;
    Expression limit = expression();
    consume(TokenType.RIGHT_SQUARE_BRACKET);

    Block body = consumeBlock();

    Token plusToken = new Token(TokenType.PLUS, null, -1, TOKEN_LINE_PLACEHOLDER);
    Expression end = new Expression.Binary(plusToken, limit, new Expression.Number(1));
    return new Expression.For(variableToken, new Expression.Number(1), end,
        new Expression.Number(1), body);
  }

  private Expression forExpression() {
    consume(TokenType.LEFT_SQUARE_BRACKET);
    consume(TokenType.VARIABLE);
    Token variableToken = currentToken;
    Expression start = expression();
    Expression end = expression();
    Expression increment = expression();
    consume(TokenType.RIGHT_SQUARE_BRACKET);

    Block body = consumeBlock();

    return new Expression.For(variableToken, start, end, increment, body);
  }

  private Expression.Block predicate() {
    if (check(TokenType.LEFT_SQUARE_BRACKET)) {
      return consumeBlock();
    } else {
      return new Expression.Block(blockUntil(TokenType.LEFT_SQUARE_BRACKET), currentToken.line());
    }
  }

  private Expression ifExpression() {
    Expression.Block predicate = predicate();
    Expression trueBranch = consumeBlock();
    return new Expression.IfElse(predicate, trueBranch, null);
  }

  private Expression ifElseExpression() {
    Expression.Block predicate = predicate();
    Expression trueBranch = consumeBlock();
    Expression falseBranch = consumeBlock();
    return new Expression.IfElse(predicate, trueBranch, falseBranch);
  }

  private Expression toExpression() {
    consume(TokenType.COMMAND);
    Token commandName = currentToken;
    List<Token> parameters = new ArrayList<>();
    consume(TokenType.LEFT_SQUARE_BRACKET);
    while (match(TokenType.VARIABLE)) {
      parameters.add(currentToken);
    }
    consume(TokenType.RIGHT_SQUARE_BRACKET);
    Block body = consumeBlock();

    return new Expression.To(commandName, parameters, body);
  }

  private List<Expression> blockUntil(TokenType limiter) {
    List<Expression> body = new ArrayList<>();
    while (!check(limiter) && !isNowEnd()) {
      body.add(expression());
    }
    return body;
  }

  private Block block() {
    if (match(TokenType.LEFT_SQUARE_BRACKET)) {
      List<Expression> body = new ArrayList<>();
      while (!match(TokenType.RIGHT_SQUARE_BRACKET) && !isNextEnd()) {
        body.add(expression());
      }
      if (isNextEnd()) {
        consume(TokenType.RIGHT_SQUARE_BRACKET);
      }
      return new Block(body, currentToken.line());
    }
    return null;
  }

  private Block consumeBlock() {
    consume(TokenType.LEFT_SQUARE_BRACKET);
    List<Expression> body = new ArrayList<>();
    while (nextToken.type() != TokenType.RIGHT_SQUARE_BRACKET && !isNextEnd()) {
      body.add(expression());
    }
    consume(TokenType.RIGHT_SQUARE_BRACKET);
    return new Block(body, currentToken.line());
  }

  private boolean check(TokenType... types) {
    for (TokenType type : types) {
      if (nextToken.type() == type) {
        return true;
      }
    }
    return false;
  }

  private Token consume(TokenType type) {
    if (!match(type)) {
      throw ErrorFactory.createError(ErrorType.PARSE, "expectedDifferentToken", nextToken);
    }
    return currentToken;
  }

  private boolean match(TokenType... types) {
    for (TokenType type : types) {
      if (nextToken.type() == type) {
        nextToken();
        return true;
      }
    }
    return false;
  }

  private boolean isNowEnd() {
    return currentToken == null || currentToken.type() == TokenType.EOF;
  }

  private boolean isNextEnd() {
    return nextToken.type() == TokenType.EOF;
  }

  private Token nextToken() {
    currentToken = nextToken;
    nextToken = lexer.nextToken();
    if (isNowEnd()) {
      throw ErrorFactory.createError(ErrorType.PARSE, "expectedToken", nextToken);
    }
    return nextToken;
  }

  private final Lexer lexer;
  private Token currentToken;
  private Token nextToken;
}
